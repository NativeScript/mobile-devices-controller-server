#!/usr/bin/env node
"use strict";

//module dependencies
const server = require("../src/server");
const debug = require("debug")("express:server");
const http = require("http");

const normalizePort = (val) => {
  const port = parseInt(val, 10);

  if (port <= 0 || isNaN(port)) {
    // named pipe
    return val;
  }

  return port;
}
const httpPort = normalizePort((process.argv.includes("--port") ? process.argv[process.argv.indexOf("--port") + 1] : process.env.DEVICE_CONTROLLER_SERVER_PORT) || 8700);

let mongoDbProcess;
let httpServer;

const start = async () => {
  return new Promise(async (resolve, reject) => {
    const onListening = () => {
      const addr = httpServer.address();
      const bind = typeof addr === "string"
        ? "pipe " + addr
        : "port " + addr.port;
      debug("Listening on " + bind);
      resolve(true);
    };

    const onClose = () => {
      if (mongoDbProcess) {
        mongoDbProcess.kill("SIGINT");
      }
      console.log("Mongodb process killed", mongoDbProcess);
      resolve();
    };

    const onError = (error) => {
      if (mongoDbProcess) {
        mongoDbProcess.kill("SIGINT");
      }

      if (error.syscall !== "listen") {
        reject();
        throw error;
      }

      const bind = typeof httpPort === "string"
        ? "Pipe " + httpPort
        : "Port " + httpPort;

      // handle specific listen errors with friendly messages
      switch (error.code) {
        case "EACCES":
          console.error(bind + " requires elevated privileges");
          process.exit(1);
          break;
        case "EADDRINUSE":
          console.error(bind + " is already in use");
          process.exit(1);
          break;
        default:
          throw error;
      }
    };

    if (process.argv.indexOf("--startmongodb") >= 0) {
      console.log("Start mongodb sever");
      try {
        const args = process.env['MONGODB_STORAGE'] ? ["--dbpath", process.env['MONGODB_STORAGE']] : [];
        console.log("Mongodb args: ", args);
        mongoDbProcess = require("child_process").spawn("mongod", args);
        mongoDbProcess.stdout.once("data", async () => {
          console.log("Mongodb sever started!!!");

          mongoDbProcess.stdout.on("data", data => {
            console.log("MONGODB DATA: ", data.toString());
          });

          mongoDbProcess.on("disconnect", code => console.log(`Mongodb has been disconnect with code ${code}`));
          mongoDbProcess.on("exit", code => console.log(`Mongodb has exited with code ${code}`));
          mongoDbProcess.on("SIGTERM", code => console.log(`Mongodb recieved SIGTERM with code ${code}`));
          mongoDbProcess.on("uncaughtException", code => {
            mongoDbProcess.kill("SIGTERM");
            console.error(`MONGODB has exited with uncaughtException ${code}!`);
            console.info(`Will try to reconnect`);
            mongoDbProcess = require("child_process").spawnSync("mongod", args);
          });

          const app = (await server.Server.bootstrap()).app;
          app.set("port", httpPort);
          console.log("Port: ", httpPort);
          httpServer = http.createServer(app);
          httpServer.listen(httpPort);
          httpServer.on("error", onError);
          httpServer.on("listening", onListening);
          httpServer.once("close", onClose);
        });

      } catch (error) {
        console.log("Failed to start mongodb: ", error);
        reject();
      }
    } else {
      const app = (await server.Server.bootstrap()).app;
      app.set("port", httpPort);
      console.log("Port: ", httpPort);

      httpServer = http.createServer(app);
      httpServer.listen(httpPort);
      httpServer.on("error", onError);
      httpServer.on("listening", onListening);
      httpServer.once("close", onClose);
      resolve(true);
    };
  });
}

const onExit = (event) => {
  if (mongoDbProcess && mongoDbProcess.isAlive) {
    console.log(`On ${event} exited`);
    mongoDbProcess.kill("SIGTERM");
    httpServer.close();
  }
}

process.on("exit", () => onExit("exit"));
process.on("SIGTERM", () => onExit("SIGTERM"));
process.on("uncaughtException", () => onExit("uncaughtException"));

start();