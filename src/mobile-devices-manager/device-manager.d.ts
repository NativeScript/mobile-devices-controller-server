import { IUnitOfWork } from "../db/interfaces/unit-of-work";
import { IDevice } from "mobile-devices-controller";
export declare const isProcessAlive: (arg: number) => boolean;
export declare class DeviceManager {
    private _unitOfWork;
    [verbose: string]: any;
    private _usedDevices;
    private _usedVirtualDevices;
    private _dontCheckForDevice;
    constructor(_unitOfWork: IUnitOfWork);
    attachToDevice(query: any): Promise<IDevice[]>;
    boot(query: any, count: any, shouldUpdate?: boolean): Promise<IDevice[]>;
    subscribeForDevice(query: any): Promise<IDevice>;
    unsubscribeFromDevice(query: any): Promise<IDevice>;
    killDevices(query?: any): Promise<IDevice[]>;
    refreshData(query: any, updateQuery: any): Promise<{}>;
    dropDB(): Promise<{}>;
    update(token: any, updateQuery: any): Promise<IDevice>;
    private getMaxDeviceCount;
    private resetDevicesCountToMaxLimitedCount;
    private killOverUsedBusyDevices;
    private filterOptions;
    private killDevice;
    private markAsShutdown;
    private mark;
    private unMark;
    private static deviceToJSON;
    private static convertIDeviceToQuery;
    private increaseDevicesUsage;
    private resetUsage;
    private checkDeviceUsageHasReachedLimit;
    private static getEmuUsageLimit;
    private static getSimUsageLimit;
    private removeVirtualDevice;
    private addVirtualDevice;
    private checkForNewDevices;
}
